<?xml version="1.0" encoding="utf-8"?>
<resources>
<declare-styleable name="ImageView">
    <!-- Sets a drawable as the content of this ImageView. -->
    <attr name="src" format="reference|color" />
    <!-- Controls how the image should be resized or moved to match the size
         of this ImageView.  See {@link android.widget.ImageView.ScaleType} -->
    <attr name="scaleType">
        <!-- Scale using the image matrix when drawing. See
             {@link android.widget.ImageView#setImageMatrix(Matrix)}. -->
        <enum name="matrix" value="0" />
        <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#FILL}. -->
        <enum name="fitXY" value="1" />
        <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#START}. -->
        <enum name="fitStart" value="2" />
        <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#CENTER}. -->
        <enum name="fitCenter" value="3" />
        <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#END}. -->
        <enum name="fitEnd" value="4" />
        <!-- Center the image in the view, but perform no scaling. -->
        <enum name="center" value="5" />
        <!-- Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
             (width and height) of the image will be equal to or larger than the corresponding
             dimension of the view (minus padding). The image is then centered in the view. -->
        <enum name="centerCrop" value="6" />
        <!-- Scale the image uniformly (maintain the image's aspect ratio) so that both
             dimensions (width and height) of the image will be equal to or less than the
             corresponding dimension of the view (minus padding). The image is then centered in
             the view. -->
        <enum name="centerInside" value="7" />
    </attr>
    <!-- Set this to true if you want the ImageView to adjust its bounds
         to preserve the aspect ratio of its drawable. -->
    <attr name="adjustViewBounds" format="boolean" />
    <!-- An optional argument to supply a maximum width for this view.
         See {see android.widget.ImageView#setMaxWidth} for details. -->
    <attr name="maxWidth" format="dimension" />
    <!-- An optional argument to supply a maximum height for this view.
         See {see android.widget.ImageView#setMaxHeight} for details. -->
    <attr name="maxHeight" format="dimension" />
    <!-- The tinting color for the image. By default, the tint will blend using SRC_ATOP mode.
         Please note that for compatibility reasons, this is NOT consistent with the default
         SRC_IN tint mode used by {@link android.widget.ImageView#setImageTintList} and by
         similar tint attributes on other views. -->
    <attr name="tint" format="color" />
    <!-- If true, the image view will be baseline aligned with based on its
         bottom edge. -->
    <attr name="baselineAlignBottom" format="boolean" />
    <!-- If true, the image will be cropped to fit within its padding. -->
    <attr name="cropToPadding" format="boolean" />
    <!-- The offset of the baseline within this view. See {see android.view.View#getBaseline}
         for details -->
    <attr name="baseline" format="dimension" />
    <!-- @hide The alpha value (0-255) set on the ImageView's drawable. Equivalent
         to calling ImageView.setAlpha(int), not the same as View.setAlpha(float). -->
    <attr name="drawableAlpha" format="integer" />
    <!-- Blending mode used to apply the image tint. -->
    <attr name="tintMode" />
</declare-styleable>
</resources>